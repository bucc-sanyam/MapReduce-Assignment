# Which vendors have the most trips, and what is the total revenue generated by that vendor?

from mrjob.job import MRJob
from mrjob.step import MRStep

# To run pass the argument of the directory containing all the 6 csv files.
# python3 mrtask_a.py <pathToDirectory>
class VendorMostTripsTotalRevenueGenerated(MRJob):

    def steps(self):
        """
        Re-define to make a multi-step job

        :return: a list of steps constructed with
                 :py:class:`~mrjob.step.MRStep` or other classes in
                 :py:mod:`mrjob.step`.
        """
        return [
            MRStep(mapper=self.mapper, reducer=self.reducer),
            MRStep(reducer=self.most_trips_reducer)]
    
    def mapper(self, _, line):
        """
        Map vendor_id key to revenue

        :param _: ignored
        :param line: line of the file
        :return : yields tuple vendor_id and mapped revenue
        """
        if line.startswith('VendorID'):
            return
        data = line.split(',')
        vendor_id = data[0]
        revenue = float(data[16])
        yield vendor_id, revenue


    def reducer(self, key, values):
        """
        Reducer job will yield a tuple (None, (trips count, total revenues, vendor_id)) for a given vendor_id

        :param key: vendor id
        :param values: revenues
        """
        revenues = list(values)
        trips_count = len(revenues)
        total_revenues = sum(revenues)
        yield None, (trips_count, total_revenues, key)

    def most_trips_reducer(self, _, values):
        """
        2nd MrJob reducer gets values as [(count, revenue, vendor_a), (count, revenue, vendor_b), ...]
        and finds the vendor with max count of trips

        :param _: ignored
        :param values: generator for (count of values, sum of revenue, vendor_id)
        """
        total_trips, total_revenue, vendor_id_most_trips = max(values)
        yield vendor_id_most_trips, total_revenue


if __name__ == '__main__':
    VendorMostTripsTotalRevenueGenerated.run()